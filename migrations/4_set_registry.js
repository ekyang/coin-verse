const BancorFormula = artifacts.require('BancorFormula.sol')
const BancorNetwork = artifacts.require('BancorNetwork.sol')
const BancorGasPriceLimit = artifacts.require('BancorGasPriceLimit.sol')
const BancorConverterFactory = artifacts.require('BancorConverterFactory.sol')
const BancorConverterUpgrader = artifacts.require('BancorConverterUpgrader.sol')
const TokenPool = artifacts.require('TokenPool.sol')
const CoinVerseContractIds = artifacts.require('CoinVerseContractIds.sol')
const ContractFeatures = artifacts.require('ContractFeatures.sol')
const ContractRegistry = artifacts.require('ContractRegistry.sol')

module.exports = async function (deployer, network, accounts) {
  let contractRegistry = await ContractRegistry.deployed()
  let tokenPool = await TokenPool.deployed()
  let contractFeatures = await ContractFeatures.deployed()
  let contractIds = await CoinVerseContractIds.deployed()
  let bancorGasLimit = await BancorGasPriceLimit.deployed()
  let bancorFormula = await BancorFormula.deployed()
  let bancorNetwork = await BancorNetwork.deployed()
  let converterFactory = await BancorConverterFactory.deployed()
  let converterUpgrader = await BancorConverterUpgrader.deployed()

  await tokenPool.setRegistry(contractRegistry.address)
  await contractRegistry.registerAddress(await contractIds.CONTRACT_FEATURES.call(), contractFeatures.address)
  await contractRegistry.registerAddress(await contractIds.BANCOR_GAS_PRICE_LIMIT.call(), bancorGasLimit.address)
  await contractRegistry.registerAddress(await contractIds.BANCOR_FORMULA.call(), bancorFormula.address)
  await contractRegistry.registerAddress(await contractIds.BANCOR_NETWORK.call(), bancorNetwork.address)
  await contractRegistry.registerAddress(await contractIds.BANCOR_CONVERTER_FACTORY.call(), converterFactory.address)
  await contractRegistry.registerAddress(await contractIds.BANCOR_CONVERTER_UPGRADER.call(), converterUpgrader.address)
  await contractRegistry.registerAddress(await contractIds.TOKEN_POOL.call(), tokenPool.address)
}
